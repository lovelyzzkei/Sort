#include<iostream>
#include<algorithm>
#include<vector>
#include<stack>
#define MAX 10001	// 가능한 총 노드의 개수
using namespace std;

int id, d[MAX];	// 각 노드마다 고유한 번호를 할당하기 위한 배열
bool finished[MAX];	// 특정한 노드에 대한 DFS가 끝났는지 확인하기 위한 배열
vector<int> a[MAX];		// 인접 노드의 정보를 담기 위한 벡터 배열
vector<vector<int> > SCC;	// 한 그래프에서 여러 개의 scc가 나올 수 있기 때문에 이차원 벡터를 사용
stack<int> s;

// DFS는 총 정점의 개수만큼 실행됨
int dfs(int x) {
	d[x] = ++id;	// 노드마다 고유한 id값을 할당함. 맨 처음에 부모로 설정된 값
	s.push(x);	// 스택에 자기 자신을 삽입

	int parent = d[x];	// 자신의 부모가 누구인지 확인
	for (int i = 0; i < a[x].size(); i++) {	// 자신의 인접노드를 확인
		int y = a[x][i];
		if (d[y] == 0) {	// 해당 노드를 방문한 적이 없다면 해당 노드로 dfs를 수행, 더 작은 값을 부모로 가지게 함
			parent = min(parent, dfs(y));
		} 
		else if (!finished[y]) {	// 방문은 했지만 아직 처리가 되지 않은 노드 즉, dfs를 수행하고 있는 노드에 대해서는 
			parent = min(parent, d[y]);	// 부모를 현재까지 처리된 값과 비교해서 더 작은 값을 선택하도록
		}
	}

	if (parent == d[x]) {	// 부모 노드가 자기 자신인 경우 스택에서 꺼내면서 scc를 만듬
		vector<int> scc;
		while (1) {
			int t = s.top();
			s.pop(		);
			scc.push_back(t);
			finished[t] = true;
			if (t == x) {	// 자기 자신이 나온 경우 while문 중단
				break;
			}
		}
		SCC.push_back(scc);
	}

	// 자신의 부모값을 반환.
	return parent;
}

int main() {
	int v = 11;
	a[1].push_back(2);
	a[2].push_back(3);
	a[3].push_back(1);
	a[4].push_back(2);
	a[4].push_back(5);
	a[5].push_back(7);
	a[6].push_back(5);
	a[7].push_back(6);
	a[8].push_back(5);
	a[8].push_back(9);
	a[9].push_back(10);
	a[10].push_back(11);
	a[11].push_back(3);
	a[11].push_back(8);
	for (int i = 1; i <= v; i++) {
		if (d[i] == 0) {	// dfs가 수행되지 않은 노드에 대해서만 dfs를 수행 
			dfs(i);
		}
	}
	cout << "scc의 개수 : " << SCC.size() << "\n";
	for (int i = 0; i < SCC.size(); i++) {
		cout << i + 1 << "번째 SCC : ";
		for (int j = 0; j < SCC[i].size(); j++) {
			cout << SCC[i][j] << " ";
		}
		cout << "\n";
	}
	return 0;
}